# Deal with rendering text to a bitmap buffer
class fontPlotter:
    # Proportional font
    FONT = [
        [0x00,0x00,0x00], # char 32 ( )
        [0x00,0xfa,0x00], # char 33 (!)
        [0x00,0xc0,0x00,0xc0,0x00], # char 34 (")
        [0x28,0xfe,0x28,0xfe,0x28,0x00], # char 35 (#)
        [0x24,0xd6,0xd6,0x48,0x00], # char 36 ($)
        [0x42,0x04,0x18,0x20,0x42,0x00], # char 37 (%)
        [0x0c,0x72,0x9a,0x6c,0x12,0x00], # char 38 (&)
        [0xc0,0x00], # char 39 (')
        [0x00,0x38,0x7c,0xc6,0x82,0x00], # char 40 (()
        [0x00,0x82,0xc6,0x7c,0x38,0x00], # char 41 ())
        [0x54,0x7c,0x38,0x7c,0x54,0x00], # char 42 (*)
        [0x10,0x10,0x7c,0x7c,0x10,0x10,0x00], # char 43 (+)
        [0x01,0x02,0x00], # char 44 (,)
        [0x10,0x10,0x10,0x00], # char 45 (-)
        [0x02,0x00], # char 46 (.)
        [0x02,0x04,0x08,0x10,0x20,0x40,0x00], # char 47 (/)
        [0x7c,0x92,0xa2,0x7c,0x00], # char 48 (0)
        [0x42,0xfe,0x02,0x00], # char 49 (1)
        [0x46,0x8a,0x92,0x62,0x00], # char 50 (2)
        [0x44,0x92,0x92,0x6c,0x00], # char 51 (3)
        [0x18,0x28,0x48,0xfe,0x00], # char 52 (4)
        [0xe4,0xa2,0xa2,0x9c,0x00], # char 53 (5)
        [0x3c,0x52,0x92,0x0c,0x00], # char 54 (6)
        [0x80,0x8e,0x90,0xe0,0x00], # char 55 (7)
        [0x6c,0x92,0x92,0x6c,0x00], # char 56 (8)
        [0x60,0x92,0x94,0x78,0x00], # char 57 (9)
        [0x00,0x66,0x00], # char 58 (:)
        [0x00,0x01,0x67,0x66,0x00], # char 59 (;)
        [0x10,0x38,0x6c,0xc6,0x82,0x00], # char 60 (<)
        [0x24,0x24,0x24,0x24,0x24,0x00], # char 61 (=)
        [0x00,0x82,0xc6,0x6c,0x38,0x10,0x00], # char 62 (>)
        [0x40,0xc0,0x8a,0x9a,0xf0,0x60,0x00], # char 63 (?)
        [0x7c,0xfe,0x82,0xba,0xba,0xf8,0x78,0x00], # char 64 (@)
        [0x7e,0x90,0x90,0x90,0x7e,0x00], # char 65 (A)
        [0xfe,0x92,0x92,0x92,0x6c,0x00], # char 66 (B)
        [0x7c,0x82,0x82,0x82,0x00], # char 67 (C)
        [0xfe,0x82,0x82,0x82,0x7c,0x00], # char 68 (D)
        [0xfe,0x92,0x92,0x82,0x00], # char 69 (E)
        [0xfe,0x90,0x90,0x80,0x00], # char 70 (F)
        [0x7c,0x82,0x82,0x8a,0x4e,0x00], # char 71 (G)
        [0xfe,0x10,0x10,0x10,0xfe,0x00], # char 72 (H)
        [0x82,0xfe,0x82,0x00], # char 73 (I)
        [0x0c,0x02,0x82,0xfc,0x00], # char 74 (J)
        [0xfe,0x10,0x28,0xc6,0x00], # char 75 (K)
        [0xfe,0x02,0x02,0x02,0x00], # char 76 (L)
        [0xfe,0x40,0x30,0x40,0xfe,0x00], # char 77 (M)
        [0xfe,0x20,0x10,0x08,0xfe,0x00], # char 78 (N)
        [0x7c,0x82,0x82,0x82,0x7c,0x00], # char 79 (O)
        [0xfe,0x90,0x90,0x90,0x60,0x00], # char 80 (P)
        [0x7c,0x82,0x82,0x84,0x7a,0x00], # char 81 (Q)
        [0xfe,0x90,0x90,0x98,0x66,0x00], # char 82 (R)
        [0x62,0x92,0x92,0x92,0x8c,0x00], # char 83 (S)
        [0x80,0x80,0xfe,0x80,0x80,0x00], # char 84 (T)
        [0xfc,0x02,0x02,0x02,0xfc,0x00], # char 85 (U)
        [0xf8,0x04,0x02,0x04,0xf8,0x00], # char 86 (V)
        [0xfe,0x04,0x08,0x04,0xfe,0x00], # char 87 (W)
        [0xc6,0x28,0x10,0x28,0xc6,0x00], # char 88 (X)
        [0xe0,0x10,0x0e,0x10,0xe0,0x00], # char 89 (Y)
        [0x86,0x8a,0x92,0xa2,0xc2,0x00], # char 90 (Z)
        [0x00,0xfe,0xfe,0x82,0x82,0x00], # char 91 ([)
        [0x40,0x20,0x10,0x08,0x04,0x02,0x00], # char 92 (\)
        [0x00,0x82,0x82,0xfe,0xfe,0x00], # char 93 (])
        [0x10,0x30,0x60,0xc0,0x60,0x30,0x10,0x00], # char 94 (^)
        [0x01,0x01,0x01,0x01,0x01,0x00], # char 95 (_)
        [0x00,0x00,0xc0,0xe0,0x20,0x00], # char 96 (`)
        [0x04,0x2a,0x2a,0x1e,0x00], # char 97 (a)
        [0xfe,0x22,0x22,0x1c,0x00], # char 98 (b)
        [0x1c,0x22,0x22,0x14,0x00], # char 99 (c)
        [0x1c,0x22,0x22,0xfe,0x00], # char 100 (d)
        [0x1c,0x2a,0x2a,0x18,0x00], # char 101 (e)
        [0x7e,0x90,0x90,0x00], # char 102 (f)
        [0x18,0x25,0x25,0x3e,0x00], # char 103 (g)
        [0xfe,0x10,0x20,0x1e,0x00], # char 104 (h)
        [0x5e,0x00], # char 105 (i)
        [0x02,0x01,0x5e,0x00], # char 106 (j)
        [0xfe,0x08,0x14,0x22,0x00], # char 107 (k)
        [0xfc,0x02,0x00], # char 108 (l)
        [0x3e,0x20,0x1c,0x20,0x1e,0x00], # char 109 (m)
        [0x3e,0x20,0x20,0x1e,0x00], # char 110 (n)
        [0x1c,0x22,0x22,0x1c,0x00], # char 111 (o)
        [0x3f,0x24,0x24,0x18,0x00], # char 112 (p)
        [0x18,0x24,0x24,0x3f,0x00], # char 113 (q)
        [0x3e,0x10,0x20,0x10,0x00], # char 114 (r)
        [0x12,0x2a,0x2a,0x24,0x00], # char 115 (s)
        [0x20,0x7c,0x22,0x00], # char 116 (t)
        [0x3c,0x02,0x02,0x3c,0x00], # char 117 (u)
        [0x38,0x04,0x02,0x04,0x38,0x00], # char 118 (v)
        [0x3c,0x02,0x0c,0x02,0x3c,0x00], # char 119 (w)
        [0x22,0x14,0x08,0x14,0x22,0x00], # char 120 (x)
        [0x38,0x05,0x05,0x3e,0x00], # char 121 (y)
        [0x22,0x26,0x2a,0x32,0x22,0x00], # char 122 (z)
        [0x10,0x10,0x7c,0xee,0x82,0x82,0x00], # char 123 ({)
        [0xfe,0x00], # char 124 (|)
        [0x82,0x82,0xee,0x7c,0x10,0x10,0x00], # char 125 (})
        [0x40,0xc0,0x80,0xc0,0x40,0xc0,0x80,0x00], # char 126 (~)
        [0x00,0x00,0x00,0x00,0x00]
    ]
        
    # Measure width of a character
    @micropython.native
    def measChar(self, c):
        return len(self.FONT[ord(c)-ord(' ')])

    # Plot a character into the rendered scrolltext buffer
    @micropython.native
    def plotChar(self, c, buffer, offset):
        l = len(buffer)
        f = self.FONT[ord(c)-ord(' ')]
        for col in f:
            buffer[offset] = col
            offset += 1
            if offset >= l:
                break
        return offset

    @micropython.native
    def newMsg(self, message, buffer=None):
        # Measure message length in columns
        width = 0
        for m in message:
            width += self.measChar(m)
        
        offset = 0
        if not buffer:
            # Allocate a buffer to hold rendered message & render into it
            buffer = bytearray(width)

        for m in message:
            offset = self.plotChar(m, buffer, offset)
